{"ast":null,"code":"var _jsxFileName = \"/Users/Lawrence/Thinkful/React/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/NextSession.js\";\nimport React from \"react\";\nimport { secondsToDuration } from \"../utils/duration\";\nimport { minutesToDuration } from \"../utils/duration\";\n\nfunction Session({\n  session,\n  focusDuration,\n  breakDuration\n}) {\n  function whichSession(label) {\n    if (label === \"Focusing\") {\n      return focusDuration;\n    } else {\n      return breakDuration;\n    }\n  }\n\n  function getElapsedPercentage(totalTime, timeRemaining) {\n    const timeInSeconds = totalTime * 60;\n    const elapsed = timeInSeconds - timeRemaining;\n    return elapsed * 100 / timeInSeconds;\n  }\n\n  if (session === null) {\n    return null;\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      \"data-testid\": \"session-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }\n    }, session.label, \" for \", minutesToDuration(whichSession(session.label)), \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead\",\n      \"data-testid\": \"session-sub-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }\n    }, secondsToDuration(session.timeRemaining), \" remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress\",\n      style: {\n        height: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress-bar\",\n      role: \"progressbar\",\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": \"100\" // TODO: Increase aria-valuenow as elapsed time increases\n      ,\n      \"aria-valuenow\": getElapsedPercentage(whichSession(session.label), session.timeRemaining) // TODO: Increase width % as elapsed time increases\n      ,\n      style: {\n        width: getElapsedPercentage(whichSession(session.label), session.timeRemaining) + \"%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }\n    })))));\n  }\n}\n\nexport default Session;","map":{"version":3,"sources":["/Users/Lawrence/Thinkful/React/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/NextSession.js"],"names":["React","secondsToDuration","minutesToDuration","Session","session","focusDuration","breakDuration","whichSession","label","getElapsedPercentage","totalTime","timeRemaining","timeInSeconds","elapsed","height","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAASC,iBAAT,QAAkC,mBAAlC;;AAGA,SAASC,OAAT,CAAkB;AAACC,EAAAA,OAAD;AAAUC,EAAAA,aAAV;AAAyBC,EAAAA;AAAzB,CAAlB,EAA2D;AACvD,WAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC1B,QAAIA,KAAK,KAAK,UAAd,EAAyB;AACrB,aAAOH,aAAP;AACH,KAFD,MAEM;AACF,aAAOC,aAAP;AACH;AACH;;AAED,WAASG,oBAAT,CAA8BC,SAA9B,EAAyCC,aAAzC,EAAuD;AACnD,UAAMC,aAAa,GAAGF,SAAS,GAAG,EAAlC;AACA,UAAMG,OAAO,GAAGD,aAAa,GAAGD,aAAhC;AACA,WAAQE,OAAO,GAAG,GAAX,GAAkBD,aAAzB;AACH;;AAED,MAAIR,OAAO,KAAK,IAAhB,EAAsB;AAClB,WAAO,IAAP;AACH,GAFD,MAEO;AACH,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI;AAAI,qBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACCA,OAAO,CAACI,KADT,WACqBN,iBAAiB,CAACK,YAAY,CAACH,OAAO,CAACI,KAAT,CAAb,CADtC,aAFJ,eAMI;AAAG,MAAA,SAAS,EAAC,MAAb;AAAoB,qBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACCP,iBAAiB,CAACG,OAAO,CAACO,aAAT,CADlB,eANJ,CADA,CAFJ,eAcI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,KAAK,EAAE;AAAEG,QAAAA,MAAM,EAAE;AAAV,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AACI,MAAA,SAAS,EAAC,cADd;AAEI,MAAA,IAAI,EAAC,aAFT;AAGI,uBAAc,GAHlB;AAII,uBAAc,KAJlB,CAKI;AALJ;AAMI,uBAAeL,oBAAoB,CAACF,YAAY,CAACH,OAAO,CAACI,KAAT,CAAb,EAA8BJ,OAAO,CAACO,aAAtC,CANvC,CAOI;AAPJ;AAQI,MAAA,KAAK,EAAE;AAAEI,QAAAA,KAAK,EAAEN,oBAAoB,CAACF,YAAY,CAACH,OAAO,CAACI,KAAT,CAAb,EAA8BJ,OAAO,CAACO,aAAtC,CAApB,GAA2E;AAApF,OARX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CADJ,CADA,CAdJ,CADJ;AAiCH;AACJ;;AAED,eAAeR,OAAf","sourcesContent":["import React from \"react\";\nimport { secondsToDuration } from \"../utils/duration\";\nimport { minutesToDuration } from \"../utils/duration\";\n\n\nfunction Session ({session, focusDuration, breakDuration}) {\n    function whichSession(label) {\n       if (label === \"Focusing\"){\n           return focusDuration;\n       } else{\n           return breakDuration;\n       } \n    }\n\n    function getElapsedPercentage(totalTime, timeRemaining){\n        const timeInSeconds = totalTime * 60;\n        const elapsed = timeInSeconds - timeRemaining;\n        return (elapsed * 100) / timeInSeconds\n    }\n\n    if (session === null) {\n        return null\n    } else {\n        return (\n            <div>\n                {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n                <div className=\"row mb-2\">\n                <div className=\"col\">\n                    {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n                    <h2 data-testid=\"session-title\">\n                    {session.label} for {minutesToDuration(whichSession(session.label))} minutes\n                    </h2>\n                    {/* TODO: Update message below correctly format the time remaining in the current session */}\n                    <p className=\"lead\" data-testid=\"session-sub-title\">\n                    {secondsToDuration(session.timeRemaining)} remaining\n                    </p>\n                </div>\n                </div>\n                <div className=\"row mb-2\">\n                <div className=\"col\">\n                    <div className=\"progress\" style={{ height: \"20px\" }}>\n                    <div\n                        className=\"progress-bar\"\n                        role=\"progressbar\"\n                        aria-valuemin=\"0\"\n                        aria-valuemax=\"100\"\n                        // TODO: Increase aria-valuenow as elapsed time increases\n                        aria-valuenow={getElapsedPercentage(whichSession(session.label), session.timeRemaining)} \n                        // TODO: Increase width % as elapsed time increases\n                        style={{ width: getElapsedPercentage(whichSession(session.label), session.timeRemaining) + \"%\" }} \n                    />\n                    </div>\n                </div>\n                </div>\n            </div>\n            );\n    }\n}\n\nexport default Session;\n"]},"metadata":{},"sourceType":"module"}