{"ast":null,"code":"var _jsxFileName = \"/Users/Lawrence/Thinkful/React/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/NextSession.js\";\nimport React from \"react\";\nimport { secondsToDuration } from \"../utils/duration\";\nimport { minutesToDuration } from \"../utils/duration\";\n\nfunction NextSession({\n  session,\n  focusDuration,\n  breakDuration\n}) {\n  function focusOrBreak(label) {\n    if (label === \"Focusing\") {\n      return focusDuration;\n    } else {\n      return breakDuration;\n    }\n  }\n\n  function elapsedTime(totalTime, timeRemaining) {\n    const seconds = totalTime * 60;\n    const elapsedTime = seconds - timeRemaining;\n    return elapsedTime * 100 / seconds;\n  }\n\n  if (session === null) {\n    return null;\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      \"data-testid\": \"session-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }\n    }, session.label, \" for \", minutesToDuration(focusOrBreak(session.label)), \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead\",\n      \"data-testid\": \"session-sub-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }\n    }, secondsToDuration(session.timeRemaining), \" remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress\",\n      style: {\n        height: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress-bar\",\n      role: \"progressbar\",\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": \"100\" // Increase aria-valuenow as elapsed time increases\n      ,\n      \"aria-valuenow\": elapsedTime(focusOrBreak(session.label), session.timeRemaining) // Increase width % as elapsed time increases\n      ,\n      style: {\n        width: elapsedTime(focusOrBreak(session.label), session.timeRemaining) + \"%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 15\n      }\n    })))));\n  }\n}\n\nexport default NextSession;","map":{"version":3,"sources":["/Users/Lawrence/Thinkful/React/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/NextSession.js"],"names":["React","secondsToDuration","minutesToDuration","NextSession","session","focusDuration","breakDuration","focusOrBreak","label","elapsedTime","totalTime","timeRemaining","seconds","height","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAASC,iBAAT,QAAkC,mBAAlC;;AAEA,SAASC,WAAT,CAAqB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,aAAX;AAA0BC,EAAAA;AAA1B,CAArB,EAAgE;AAC9D,WAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,QAAIA,KAAK,KAAK,UAAd,EAA0B;AACxB,aAAOH,aAAP;AACD,KAFD,MAEO;AACL,aAAOC,aAAP;AACD;AACF;;AAED,WAASG,WAAT,CAAqBC,SAArB,EAAgCC,aAAhC,EAA+C;AAC7C,UAAMC,OAAO,GAAGF,SAAS,GAAG,EAA5B;AACA,UAAMD,WAAW,GAAGG,OAAO,GAAGD,aAA9B;AACA,WAAQF,WAAW,GAAG,GAAf,GAAsBG,OAA7B;AACD;;AAED,MAAIR,OAAO,KAAK,IAAhB,EAAsB;AACpB,WAAO,IAAP;AACD,GAFD,MAEO;AACL,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AAAI,qBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,OAAO,CAACI,KADX,WACuBN,iBAAiB,CAACK,YAAY,CAACH,OAAO,CAACI,KAAT,CAAb,CADxC,aAFF,eAME;AAAG,MAAA,SAAS,EAAC,MAAb;AAAoB,qBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGP,iBAAiB,CAACG,OAAO,CAACO,aAAT,CADpB,eANF,CADF,CAFF,eAcE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,KAAK,EAAE;AAAEE,QAAAA,MAAM,EAAE;AAAV,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,SAAS,EAAC,cADZ;AAEE,MAAA,IAAI,EAAC,aAFP;AAGE,uBAAc,GAHhB;AAIE,uBAAc,KAJhB,CAKE;AALF;AAME,uBAAeJ,WAAW,CACxBF,YAAY,CAACH,OAAO,CAACI,KAAT,CADY,EAExBJ,OAAO,CAACO,aAFgB,CAN5B,CAUE;AAVF;AAWE,MAAA,KAAK,EAAE;AACLG,QAAAA,KAAK,EACHL,WAAW,CACTF,YAAY,CAACH,OAAO,CAACI,KAAT,CADH,EAETJ,OAAO,CAACO,aAFC,CAAX,GAGI;AALD,OAXT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF,CAdF,CADF;AAyCD;AACF;;AAED,eAAeR,WAAf","sourcesContent":["import React from \"react\";\nimport { secondsToDuration } from \"../utils/duration\";\nimport { minutesToDuration } from \"../utils/duration\";\n\nfunction NextSession({ session, focusDuration, breakDuration }) {\n  function focusOrBreak(label) {\n    if (label === \"Focusing\") {\n      return focusDuration;\n    } else {\n      return breakDuration;\n    }\n  }\n\n  function elapsedTime(totalTime, timeRemaining) {\n    const seconds = totalTime * 60;\n    const elapsedTime = seconds - timeRemaining;\n    return (elapsedTime * 100) / seconds;\n  }\n\n  if (session === null) {\n    return null;\n  } else {\n    return (\n      <div>\n        {/* show area only when there is an active focus or break - i.e. the session is running or is paused */}\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* Update message below to include current session (Focusing or On Break) total duration */}\n            <h2 data-testid=\"session-title\">\n              {session.label} for {minutesToDuration(focusOrBreak(session.label))} minutes\n            </h2>\n            {/* format time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              {secondsToDuration(session.timeRemaining)} remaining\n            </p>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                // Increase aria-valuenow as elapsed time increases\n                aria-valuenow={elapsedTime(\n                  focusOrBreak(session.label),\n                  session.timeRemaining\n                )}\n                // Increase width % as elapsed time increases\n                style={{\n                  width:\n                    elapsedTime(\n                      focusOrBreak(session.label),\n                      session.timeRemaining\n                    ) + \"%\"}}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NextSession;\n"]},"metadata":{},"sourceType":"module"}