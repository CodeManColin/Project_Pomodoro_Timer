{"ast":null,"code":"var _jsxFileName = \"/Users/Lawrence/Thinkful/React/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/NextSession.js\";\nimport React from \"react\";\nimport minutesToDuration from \"./utils/duration\";\nimport secondsToDuration from \"./utils/duration\";\n\nfunction NextSession({\n  session,\n  focusDuration,\n  breakDuration\n}) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  function whichSession(label) {\n    if (label === \"Focusing\") {\n      return focusDuration;\n    } else {\n      return breakDuration;\n    }\n  }\n\n  function getElapsedPercentage(totalTime, timeRemaining) {\n    const timeInSeconds = totalTime * 60;\n    const elapsed = timeInSeconds - timeRemaining;\n    return elapsed * 100 / timeInSeconds;\n  }\n\n  if (session === null) {\n    return null;\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      \"data-testid\": \"session-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }\n    }, session.label, \" for \", minutesToDuration(whichSession(session.label)), \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead\",\n      \"data-testid\": \"session-sub-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }\n    }, secondsToDuration(session.timeRemaining), \" remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress\",\n      style: {\n        height: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress-bar\",\n      role: \"progressbar\",\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": \"100\",\n      \"aria-valuenow\": getElapsedPercentage(whichSession(session.label), session.timeRemaining),\n      style: {\n        width: getElapsedPercentage(whichSession(session.label), session.timeRemaining) + \"%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }\n    })))));\n  }\n}\n\nexport default NextSession;","map":{"version":3,"sources":["/Users/Lawrence/Thinkful/React/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/NextSession.js"],"names":["React","minutesToDuration","secondsToDuration","NextSession","session","focusDuration","breakDuration","whichSession","label","getElapsedPercentage","totalTime","timeRemaining","timeInSeconds","elapsed","height","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,iBAAP,MAA8B,kBAA9B;AACA,OAAOC,iBAAP,MAA8B,kBAA9B;;AAEA,SAASC,WAAT,CAAqB;AAACC,EAAAA,OAAD;AAAUC,EAAAA,aAAV;AAAyBC,EAAAA;AAAzB,CAArB,EAA8D;AAC1D;AACJ;AACA;AACK,WAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC5B,QAAIA,KAAK,KAAK,UAAd,EAAyB;AACrB,aAAOH,aAAP;AACH,KAFD,MAEM;AACF,aAAOC,aAAP;AACH;AACH;;AAED,WAASG,oBAAT,CAA8BC,SAA9B,EAAyCC,aAAzC,EAAuD;AACnD,UAAMC,aAAa,GAAGF,SAAS,GAAG,EAAlC;AACA,UAAMG,OAAO,GAAGD,aAAa,GAAGD,aAAhC;AACA,WAAQE,OAAO,GAAG,GAAX,GAAkBD,aAAzB;AACH;;AAGF,MAAIR,OAAO,KAAK,IAAhB,EAAsB;AACpB,WAAO,IAAP;AACH,GAFC,MAEK;AACH,wBACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEA;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AAAI,qBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACCA,OAAO,CAACI,KADT,WACqBP,iBAAiB,CAACM,YAAY,CAACH,OAAO,CAACI,KAAT,CAAb,CADtC,aAFF,eAME;AAAG,MAAA,SAAS,EAAC,MAAb;AAAoB,qBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACCN,iBAAiB,CAACE,OAAO,CAACO,aAAT,CADlB,eANF,CADF,CAFA,eAcA;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,KAAK,EAAE;AAAEG,QAAAA,MAAM,EAAE;AAAV,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,SAAS,EAAC,cADZ;AAEE,MAAA,IAAI,EAAC,aAFP;AAGE,uBAAc,GAHhB;AAIE,uBAAc,KAJhB;AAKE,uBAAeL,oBAAoB,CAACF,YAAY,CAACH,OAAO,CAACI,KAAT,CAAb,EAA8BJ,OAAO,CAACO,aAAtC,CALrC;AAME,MAAA,KAAK,EAAE;AAAEI,QAAAA,KAAK,EAAEN,oBAAoB,CAACF,YAAY,CAACH,OAAO,CAACI,KAAT,CAAb,EAA8BJ,OAAO,CAACO,aAAtC,CAApB,GAA2E;AAApF,OANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF,CAdA,CADE;AA+BH;AACA;;AAED,eAAeR,WAAf","sourcesContent":["import React from \"react\";\nimport minutesToDuration from \"./utils/duration\";\nimport secondsToDuration from \"./utils/duration\";\n\nfunction NextSession({session, focusDuration, breakDuration}) {\n    /**\n     * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n     */\n     function whichSession(label) {\n      if (label === \"Focusing\"){\n          return focusDuration;\n      } else{\n          return breakDuration;\n      } \n   }\n  \n   function getElapsedPercentage(totalTime, timeRemaining){\n       const timeInSeconds = totalTime * 60;\n       const elapsed = timeInSeconds - timeRemaining;\n       return (elapsed * 100) / timeInSeconds\n   }\n\n\n  if (session === null) {\n    return null\n} else {\n    return (\n  <div>\n  {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n  <div className=\"row mb-2\">\n    <div className=\"col\">\n      {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n      <h2 data-testid=\"session-title\">\n      {session.label} for {minutesToDuration(whichSession(session.label))} minutes\n      </h2>\n      {/* TODO: Update message below correctly format the time remaining in the current session */}\n      <p className=\"lead\" data-testid=\"session-sub-title\">\n      {secondsToDuration(session.timeRemaining)} remaining\n      </p>\n    </div>\n  </div>\n  <div className=\"row mb-2\">\n    <div className=\"col\">\n      <div className=\"progress\" style={{ height: \"20px\" }}>\n        <div\n          className=\"progress-bar\"\n          role=\"progressbar\"\n          aria-valuemin=\"0\"\n          aria-valuemax=\"100\"\n          aria-valuenow={getElapsedPercentage(whichSession(session.label), session.timeRemaining)} \n          style={{ width: getElapsedPercentage(whichSession(session.label), session.timeRemaining) + \"%\" }}\n        />\n      </div>\n    </div>\n  </div>\n</div>\n    );\n}\n}\n\nexport default NextSession;"]},"metadata":{},"sourceType":"module"}