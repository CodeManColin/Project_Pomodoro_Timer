{"ast":null,"code":"var _jsxFileName = \"/Users/Lawrence/Thinkful/React/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/NextSession.js\";\nimport React from \"react\";\nimport { secondsToDuration } from \"../utils/duration\";\nimport { minutesToDuration } from \"../utils/duration\";\n\nfunction NextSession({\n  session,\n  focusDuration,\n  breakDuration\n}) {\n  /**\n   * State function to transition the current session type to the next session. \n   * e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  const focusOrBreak = session => {\n    if (session.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  }; // function focusOrBreak(label) {\n  //      if (label === \"Focusing\"){\n  //          return focusDuration;\n  //      } else {\n  //          return breakDuration;\n  //      } \n  //   }\n\n\n  function elapsedTime(totalTime, timeRemaining) {\n    const seconds = totalTime * 60;\n    const elapsedTime = seconds - timeRemaining;\n    return elapsedTime * 100 / seconds;\n  }\n\n  if (session === null) {\n    return null;\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      \"data-testid\": \"session-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }\n    }, session.label, \" for \", minutesToDuration(focusOrBreak(session.label)), \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead\",\n      \"data-testid\": \"session-sub-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }\n    }, secondsToDuration(currentSession.timeRemaining), \" remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress\",\n      style: {\n        height: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress-bar\",\n      role: \"progressbar\",\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": \"100\" // TODO: Increase aria-valuenow as elapsed time increases\n      ,\n      \"aria-valuenow\": elapsedTime(focusOrBreak(currentSession.label), currentSession.timeRemaining) // TODO: Increase width % as elapsed time increases\n      ,\n      style: {\n        width: elapsedTime(focusOrBreak(currentSession.label), currentSession.timeRemaining) + \"%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }\n    })))));\n  }\n}\n\nexport default NextSession;","map":{"version":3,"sources":["/Users/Lawrence/Thinkful/React/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/NextSession.js"],"names":["React","secondsToDuration","minutesToDuration","NextSession","session","focusDuration","breakDuration","focusOrBreak","label","timeRemaining","elapsedTime","totalTime","seconds","currentSession","height","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAASC,iBAAT,QAAkC,mBAAlC;;AAGA,SAASC,WAAT,CAAsB;AAACC,EAAAA,OAAD;AAAUC,EAAAA,aAAV;AAAyBC,EAAAA;AAAzB,CAAtB,EAA+D;AAE3D;AACJ;AACA;AACA;AACI,QAAMC,YAAY,GAAGH,OAAO,IAAI;AAC9B,QAAIA,OAAO,CAACI,KAAR,KAAkB,UAAtB,EAAkC;AAChC,aAAO;AACLA,QAAAA,KAAK,EAAE,UADF;AAELC,QAAAA,aAAa,EAAEH,aAAa,GAAG;AAF1B,OAAP;AAID;;AACD,WAAO;AACLE,MAAAA,KAAK,EAAE,UADF;AAELC,MAAAA,aAAa,EAAEJ,aAAa,GAAG;AAF1B,KAAP;AAID,GAXD,CAN2D,CAmB7D;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEE,WAASK,WAAT,CAAqBC,SAArB,EAAgCF,aAAhC,EAA8C;AAC1C,UAAMG,OAAO,GAAGD,SAAS,GAAG,EAA5B;AACA,UAAMD,WAAW,GAAGE,OAAO,GAAGH,aAA9B;AACA,WAAQC,WAAW,GAAG,GAAf,GAAsBE,OAA7B;AACH;;AAED,MAAIR,OAAO,KAAK,IAAhB,EAAsB;AAClB,WAAO,IAAP;AACH,GAFD,MAEO;AACH,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI;AAAI,qBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACCA,OAAO,CAACI,KADT,WACqBN,iBAAiB,CAACK,YAAY,CAACH,OAAO,CAACI,KAAT,CAAb,CADtC,aAFJ,eAMI;AAAG,MAAA,SAAS,EAAC,MAAb;AAAoB,qBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACCP,iBAAiB,CAACY,cAAc,CAACJ,aAAhB,CADlB,eANJ,CADA,CAFJ,eAcI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,KAAK,EAAE;AAAEK,QAAAA,MAAM,EAAE;AAAV,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AACI,MAAA,SAAS,EAAC,cADd;AAEI,MAAA,IAAI,EAAC,aAFT;AAGI,uBAAc,GAHlB;AAII,uBAAc,KAJlB,CAKI;AALJ;AAMI,uBAAeJ,WAAW,CAACH,YAAY,CAACM,cAAc,CAACL,KAAhB,CAAb,EAAqCK,cAAc,CAACJ,aAApD,CAN9B,CAOI;AAPJ;AAQI,MAAA,KAAK,EAAE;AAAEM,QAAAA,KAAK,EAAEL,WAAW,CAACH,YAAY,CAACM,cAAc,CAACL,KAAhB,CAAb,EAAqCK,cAAc,CAACJ,aAApD,CAAX,GAAgF;AAAzF,OARX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CADJ,CADA,CAdJ,CADJ;AAiCH;AACJ;;AAED,eAAeN,WAAf","sourcesContent":["import React from \"react\";\nimport { secondsToDuration } from \"../utils/duration\";\nimport { minutesToDuration } from \"../utils/duration\";\n\n\nfunction NextSession ({session, focusDuration, breakDuration}) {\n  \n    /**\n     * State function to transition the current session type to the next session. \n     * e.g. On Break -> Focusing or Focusing -> On Break\n     */\n    const focusOrBreak = session => {\n      if (session.label === \"Focusing\") {\n        return {\n          label: \"On Break\",\n          timeRemaining: breakDuration * 60,\n        };\n      }\n      return {\n        label: \"Focusing\",\n        timeRemaining: focusDuration * 60,\n      };\n    }\n  \n  // function focusOrBreak(label) {\n  //      if (label === \"Focusing\"){\n  //          return focusDuration;\n  //      } else {\n  //          return breakDuration;\n  //      } \n  //   }\n\n    function elapsedTime(totalTime, timeRemaining){\n        const seconds = totalTime * 60;\n        const elapsedTime = seconds - timeRemaining;\n        return (elapsedTime * 100) / seconds\n    }\n\n    if (session === null) {\n        return null\n    } else {\n        return (\n            <div>\n                {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n                <div className=\"row mb-2\">\n                <div className=\"col\">\n                    {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n                    <h2 data-testid=\"session-title\">\n                    {session.label} for {minutesToDuration(focusOrBreak(session.label))} minutes\n                    </h2>\n                    {/* TODO: Update message below correctly format the time remaining in the current session */}\n                    <p className=\"lead\" data-testid=\"session-sub-title\">\n                    {secondsToDuration(currentSession.timeRemaining)} remaining\n                    </p>\n                </div>\n                </div>\n                <div className=\"row mb-2\">\n                <div className=\"col\">\n                    <div className=\"progress\" style={{ height: \"20px\" }}>\n                    <div\n                        className=\"progress-bar\"\n                        role=\"progressbar\"\n                        aria-valuemin=\"0\"\n                        aria-valuemax=\"100\"\n                        // TODO: Increase aria-valuenow as elapsed time increases\n                        aria-valuenow={elapsedTime(focusOrBreak(currentSession.label), currentSession.timeRemaining)} \n                        // TODO: Increase width % as elapsed time increases\n                        style={{ width: elapsedTime(focusOrBreak(currentSession.label), currentSession.timeRemaining) + \"%\" }} \n                    />\n                    </div>\n                </div>\n                </div>\n            </div>\n            );\n    }\n}\n\nexport default NextSession;\n"]},"metadata":{},"sourceType":"module"}